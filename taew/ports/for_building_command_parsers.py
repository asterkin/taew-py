from typing import Protocol, Any
from taew.ports.for_browsing_code_tree import Function
from collections.abc import Sequence, Callable, Iterator


class Builder(Protocol):
    def __iter__(self) -> Iterator[str]: ...
    def add_subcommand(self, name: str, description: str) -> None: ...
    def add_command(self, name: str, description: str, func: Function) -> None: ...
    def add_item_description(self, name: str, description: str) -> None: ...
    def execute(self, command: Callable[..., Any] | None) -> Any: ...
    def error(self, msg: str) -> None: ...


class Build(Protocol):
    def __call__(
        self, description: str, version: str, cmd_args: Sequence[str]
    ) -> Builder: ...
